# code debugging in progress

#Initial data processing .....
..
..
..
..
..


coordinates = list(zip(X, Y))
print(coordinates)

# Path to geodatabase and feature class
output_gdb = r"C:\Users\alexis.graciarodrigu\Desktop\HCPropertyInventory_Pro.gdb"

# Set spatial reference
spatial_ref = arcpy.SpatialReference(2278)

arcpy.env.workspace = r'C:\Users\alexis.graciarodrigu\Desktop\PID.sde\HCPID_GDB.PID.Land\HCPID_GDB.PID.RPD_HCOwnedProperty'
ws = arcpy.env.workspace
fc = f'{ws}\HCPID_GDB.PID.RPD_HCOwnedProperty'



# Define a polygon using the points (make sure the first and last points are the same to close the polygon)
polygon_points = coordinates + [coordinates[0]]  # Closing the loop

with arcpy.da.InsertCursor(output_gdb + "\\" + feature_class, ['SHAPE@']) as cursor:
    array = arcpy.Array([arcpy.Point(x, y) for x, y in polygon_points])
    polygon = arcpy.Polygon(array, spatial_ref)
    cursor.insertRow([polygon])



#FIRST ATTEMPT TO SOLVE IT
import arcpy

# Initial data processing...
# (Your data processing code here)
# ...

# Example coordinates (ensure you define X and Y properly in your processing)
coordinates = list(zip(X, Y))
print(coordinates)

# Path to geodatabase and feature class
output_gdb = r"C:\Users\alexis.graciarodrigu\Desktop\HCPropertyInventory_Pro.gdb"

# Set spatial reference
spatial_ref = arcpy.SpatialReference(2278)

# Set the workspace
arcpy.env.workspace = r'C:\Users\alexis.graciarodrigu\Desktop\PID.sde'

# Define the full path to the feature class
# Use double backslashes or raw string format to avoid issues with escape characters
fc = r'C:\Users\alexis.graciarodrigu\Desktop\PID.sde\HCPID_GDB.PID.Land\HCPID_GDB.PID.RPD_HCOwnedProperty'

# Define a polygon using the points (make sure the first and last points are the same to close the polygon)
polygon_points = coordinates + [coordinates[0]]  # Closing the loop

# Insert the polygon into the feature class
with arcpy.da.InsertCursor(fc, ['SHAPE@']) as cursor:
    array = arcpy.Array([arcpy.Point(x, y) for x, y in polygon_points])
    polygon = arcpy.Polygon(array, spatial_ref)
    cursor.insertRow([polygon])



#attempt 2

# Initial data processing...
# (Your data processing code to set up X and Y)

# Example coordinates (ensure you define X and Y properly in your processing)
coordinates = list(zip(X, Y))
print("Coordinates:", coordinates)

# Path to geodatabase and feature class
output_gdb = r"C:\Users\alexis.graciarodrigu\Desktop\HCPropertyInventory_Pro.gdb"

# Set spatial reference
spatial_ref = arcpy.SpatialReference(2278)

# Set the workspace
arcpy.env.workspace = r'C:\Users\alexis.graciarodrigu\Desktop\PID.sde'

# Define the full path to the feature class
fc = r'C:\Users\alexis.graciarodrigu\Desktop\PID.sde\HCPID_GDB.PID.Land\HCPID_GDB.PID.RPD_HCOwnedProperty'

# Start an edit session
edit = arcpy.da.Editor(arcpy.env.workspace)

try:
    # Start the edit operation
    edit.startEditing(False, True)  # (no undo, allow edits)

    # Start an edit operation
    edit.startOperation()

    # Define a polygon using the points (make sure the first and last points are the same to close the polygon)
    polygon_points = coordinates + [coordinates[0]]  # Closing the loop

    # Insert the polygon into the feature class
    with arcpy.da.InsertCursor(fc, ['SHAPE@']) as cursor:
        array = arcpy.Array([arcpy.Point(x, y) for x, y in polygon_points])
        polygon = arcpy.Polygon(array, spatial_ref)
        cursor.insertRow([polygon])
    
    print("Parcel drawn successfully.")

    # Complete the edit operation
    edit.stopOperation()
except Exception as e:
    print(f"Error occurred: {e}")
    # If an error occurs, abort the edit operation
    edit.abortOperation()
finally:
    # Stop editing session
    edit.stopEditing(True)  # Save changes



# Check if the current word contains a full degrees, minutes, and seconds format
match_full = re.findall(r'(\d+)°(\d+)\'\s*(\d+)"', content[i])
if match_full:
    # If the full match is found, skip further degrees/minutes/seconds checks for this entry
    for degree, minute, second in match_full:
        degrees.append(float(degree))
        minutes.append(float(minute))
        seconds.append(float(second))


case 1:  72°07'56" 
case 2:  87°57' 34" 
case 3:  02° 02' 26" 




# Regular expression to match degrees, minutes, seconds with optional spaces and fixed directional indicators
match_full = re.findall(r'(North|South)\s*(\d+)\s*°\s*(\d+)\s*\'\s*(\d+)"\s*(East|West)', content[i])

if match_full:
    # If the full match is found, process the components
    for direction1, degree, minute, second, direction2 in match_full:
        degrees.append(float(degree))
        minutes.append(float(minute))
        seconds.append(float(second))
        # You can also store or process the directions (direction1 and direction2) if needed





# Updated regular expression to allow optional spaces between degrees, minutes, and seconds
match_full = re.findall(r'(\d+)\s*°\s*(\d+)\s*\'\s*(\d+)\s*"', content[i])

if match_full:
    # If the full match is found, skip further degrees/minutes/seconds checks for this entry
    for degree, minute, second in match_full:
        degrees.append(float(degree))
        minutes.append(float(minute))
        seconds.append(float(second))
    continue  # Skip further checks for this entry since we already extracted the full set



# Updated regular expression to allow for optional spaces between degrees, minutes, and seconds
match_full = re.findall(r'(\d+)\s*°\s*(\d+)\s*\'\s*(\d+)\s*"', content[i])

if match_full:
    # If the full match is found, skip further degrees/minutes/seconds checks for this entry
    for degree, minute, second in match_full:
        degrees.append(float(degree))
        minutes.append(float(minute))
        seconds.append(float(second))
    continue  # Skip further checks for this entry since we already extracted the full set




import re

# Example content simulating your cases
content = [
    '72°07\'56"',  # Case 1: no spaces between components
    '87°57\' 34"',  # Case 2: space between minutes and seconds
    '02° 02\' 26"'  # Case 3: space between degrees, minutes, and seconds
]

# Initialize lists to store extracted degrees, minutes, and seconds
degrees = []
minutes = []
seconds = []

# Loop through the content and apply specific regex for each case
for i in range(len(content)):
    # Case 1: Handle no spaces between degrees, minutes, and seconds
    match_case1 = re.findall(r'(\d+)°(\d+)\'(\d+)"', content[i])
    
    # Case 2: Handle space between minutes and seconds
    match_case2 = re.findall(r'(\d+)°(\d+)\'\s*(\d+)"', content[i])
    
    # Case 3: Handle spaces between degrees, minutes, and seconds
    match_case3 = re.findall(r'(\d+)\s*°\s*(\d+)\s*\'\s*(\d+)\s*"', content[i])
    
    # Check for matches and append the extracted values
    if match_case1:
        for degree, minute, second in match_case1:
            degrees.append(float(degree))
            minutes.append(float(minute))
            seconds.append(float(second))
    elif match_case2:
        for degree, minute, second in match_case2:
            degrees.append(float(degree))
            minutes.append(float(minute))
            seconds.append(float(second))
    elif match_case3:
        for degree, minute, second in match_case3:
            degrees.append(float(degree))
            minutes.append(float(minute))
            seconds.append(float(second))

# Output the extracted degrees, minutes, and seconds
print("Degrees:", degrees)
print("Minutes:", minutes)
print("Seconds:", seconds)






